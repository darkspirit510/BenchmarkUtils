package org.owasp.benchmarkutils.score.report.html;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Set;
import org.owasp.benchmarkutils.helpers.Categories;
import org.owasp.benchmarkutils.helpers.Category;
import org.owasp.benchmarkutils.helpers.ResourceProvider;
import org.owasp.benchmarkutils.score.Configuration;
import org.owasp.benchmarkutils.score.Tool;
import org.owasp.benchmarkutils.score.domain.TestSuiteName;

public class VulnerabilityScorecardPage {

    private final Configuration config;
    private final TestSuiteName testSuiteName;
    private final String testSuiteVersion;
    private final ResourceProvider resourceProvider;
    private final String projectLinkEntry;
    private final String precisionKeyEntry;
    private final String fsCoreEntry;

    private final VulnerabilityStatsTable vulnerabilityStatsTable;

    public VulnerabilityScorecardPage(
            Configuration config,
            TestSuiteName testSuiteName,
            Set<Tool> tools,
            String testSuiteVersion,
            ResourceProvider resourceProvider,
            String projectLinkEntry,
            String precisionKeyEntry,
            String fsCoreEntry) {
        this.config = config;
        this.testSuiteName = testSuiteName;
        this.testSuiteVersion = testSuiteVersion;
        this.resourceProvider = resourceProvider;
        this.projectLinkEntry = projectLinkEntry;
        this.precisionKeyEntry = precisionKeyEntry;
        this.fsCoreEntry = fsCoreEntry;

        this.vulnerabilityStatsTable = new VulnerabilityStatsTable(config, testSuiteName, tools);
    }

    public void writeTo(File scoreCardDir, String cat) {
        try {
            String filename =
                    testSuiteName.simpleName()
                            + "_v"
                            + testSuiteVersion
                            + "_Scorecard_for_"
                            + cat.replace(' ', '_');
            File htmlFile = new File(scoreCardDir, filename + ".html");

            String html = resourceProvider.loadAsString("scorecard/vulntemplate.html");
            html = html.replace("${testsuite}", testSuiteName.fullName());
            String fullTitle = testSuiteName.fullName() + " Scorecard for " + cat;

            html = html.replace("${image}", filename + ".png");
            html = html.replace("${title}", fullTitle);
            html =
                    html.replace(
                            "${vulnerability}", cat + " (CWE #" + translateNameToCWE(cat) + ")");
            html = html.replace("${version}", testSuiteVersion);
            html = html.replace("${projectlink}", projectLinkEntry);

            html = html.replace("${table}", vulnerabilityStatsTable.generateFor(cat));
            html = html.replace("${tprlabel}", config.tprLabel);
            html = html.replace("${precisionkey}", precisionKeyEntry + fsCoreEntry);

            Files.write(htmlFile.toPath(), html.getBytes());
        } catch (IOException e) {
            System.out.println("Error generating vulnerability summaries: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * This method translates vulnerability names, e.g., Cross-Site Scripting, to their CWE number.
     *
     * @param categoryName - The category to translate.
     * @return The CWE # of that category.
     */
    private int translateNameToCWE(String categoryName) {
        int cwe;

        Category category = Categories.getByName(categoryName);
        if (category == null) {
            System.out.println("Error: Category: " + categoryName + " not supported.");
            cwe = -1;
        } else {
            cwe = category.getCWE();
        }

        return cwe;
    }
}
